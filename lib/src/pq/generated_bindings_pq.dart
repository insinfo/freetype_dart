// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class BindingsPq {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BindingsPq(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BindingsPq.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<FILE> __acrt_iob_func(
    int _Ix,
  ) {
    return ___acrt_iob_func(
      _Ix,
    );
  }

  late final ___acrt_iob_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.UnsignedInt)>>(
          '__acrt_iob_func');
  late final ___acrt_iob_func =
      ___acrt_iob_funcPtr.asFunction<ffi.Pointer<FILE> Function(int)>();

  int fgetwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('fgetwc');
  late final _fgetwc = _fgetwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetwchar() {
    return __fgetwchar();
  }

  late final __fgetwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_fgetwchar');
  late final __fgetwchar = __fgetwcharPtr.asFunction<int Function()>();

  int fputwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwcPtr = _lookup<
      ffi
      .NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>('fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputwchar(
    int _Character,
  ) {
    return __fputwchar(
      _Character,
    );
  }

  late final __fputwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('_fputwchar');
  late final __fputwchar = __fputwcharPtr.asFunction<int Function(int)>();

  int getwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('getwc');
  late final _getwc = _getwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.WChar> fgetws(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Int, ffi.Pointer<FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, int, ffi.Pointer<FILE>)>();

  int fputws(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.WChar> _getws_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __getws_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __getws_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_getws_s');
  late final __getws_s = __getws_sPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>();

  int putwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwcPtr = _lookup<
      ffi
      .NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>('putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<int Function(int)>();

  int _putws(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __putws(
      _Buffer,
    );
  }

  late final __putwsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_putws');
  late final __putws =
      __putwsPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int ungetwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          'ungetwc');
  late final _ungetwc =
      _ungetwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfdopen(
    int _FileHandle,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __wfdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.WChar>)>>('_wfdopen');
  late final __wfdopen = __wfdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wfopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen(
      _FileName,
      _Mode,
    );
  }

  late final __wfopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wfopen');
  late final __wfopen = __wfopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wfopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wfopen_s');
  late final __wfopen_s = __wfopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wfreopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>>('_wfreopen');
  late final __wfreopen = __wfreopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  int _wfreopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<FILE>)>>('_wfreopen_s');
  late final __wfreopen_s = __wfreopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfsopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    int _ShFlag,
  ) {
    return __wfsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __wfsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Int)>>('_wfsopen');
  late final __wfsopen = __wfsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  void _wperror(
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wpopen(
    ffi.Pointer<ffi.WChar> _Command,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wpopen(
      _Command,
      _Mode,
    );
  }

  late final __wpopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wpopen');
  late final __wpopen = __wpopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wremove(
    ffi.Pointer<ffi.WChar> _FileName,
  ) {
    return __wremove(
      _FileName,
    );
  }

  late final __wremovePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wremove');
  late final __wremove =
      __wremovePtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> _wtempnam(
    ffi.Pointer<ffi.WChar> _Directory,
    ffi.Pointer<ffi.WChar> _FilePrefix,
  ) {
    return __wtempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final __wtempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wtempnam');
  late final __wtempnam = __wtempnamPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wtmpnam_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wtmpnam_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __wtmpnam_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wtmpnam_s');
  late final __wtmpnam_s =
      __wtmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wtmpnam(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wtmpnam(
      _Buffer,
    );
  }

  late final __wtmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wtmpnam');
  late final __wtmpnam = __wtmpnamPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _fgetwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetwc_nolock(
      _Stream,
    );
  }

  late final __fgetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_fgetwc_nolock');
  late final __fgetwc_nolock =
      __fgetwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputwc_nolockPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      '_fputwc_nolock');
  late final __fputwc_nolock =
      __fputwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _getwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getwc_nolock(
      _Stream,
    );
  }

  late final __getwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_getwc_nolock');
  late final __getwc_nolock =
      __getwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putwc_nolockPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      '_putwc_nolock');
  late final __putwc_nolock =
      __putwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          '_ungetwc_nolock');
  late final __ungetwc_nolock =
      __ungetwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int __stdio_common_vfwprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf');
  late final ___stdio_common_vfwprintf =
      ___stdio_common_vfwprintfPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_s');
  late final ___stdio_common_vfwprintf_s =
      ___stdio_common_vfwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_p');
  late final ___stdio_common_vfwprintf_p =
      ___stdio_common_vfwprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwscanf');
  late final ___stdio_common_vfwscanf = ___stdio_common_vfwscanfPtr.asFunction<
      int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>, _locale_t,
          va_list)>();

  int __stdio_common_vswprintf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf');
  late final ___stdio_common_vswprintf =
      ___stdio_common_vswprintfPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vswprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_s');
  late final ___stdio_common_vswprintf_s =
      ___stdio_common_vswprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vsnwprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnwprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vsnwprintf_s');
  late final ___stdio_common_vsnwprintf_s =
      ___stdio_common_vsnwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, int,
              ffi.Pointer<ffi.WChar>, _locale_t, va_list)>();

  int __stdio_common_vswprintf_p(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_p');
  late final ___stdio_common_vswprintf_p =
      ___stdio_common_vswprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vswscanf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswscanf');
  late final ___stdio_common_vswscanf = ___stdio_common_vswscanfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          _locale_t, va_list)>();

  int _get_stream_buffer_pointers(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int>> _Count,
  ) {
    return __get_stream_buffer_pointers(
      _Stream,
      _Base,
      _Pointer,
      _Count,
    );
  }

  late final __get_stream_buffer_pointersPtr = _lookup<
          ffi.NativeFunction<
              errno_t Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int>>)>>(
      '_get_stream_buffer_pointers');
  late final __get_stream_buffer_pointers =
      __get_stream_buffer_pointersPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  int clearerr_s(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr_s(
      _Stream,
    );
  }

  late final _clearerr_sPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<FILE>)>>(
          'clearerr_s');
  late final _clearerr_s =
      _clearerr_sPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _fopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen_s');
  late final _fopen_s = _fopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int fread_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_s');
  late final _fread_s = _fread_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int freopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _freopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _freopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>)>>('freopen_s');
  late final _freopen_s = _freopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> gets_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _gets_s(
      _Buffer,
      _Size,
    );
  }

  late final _gets_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, rsize_t)>>('gets_s');
  late final _gets_s = _gets_sPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int tmpfile_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
  ) {
    return _tmpfile_s(
      _Stream,
    );
  }

  late final _tmpfile_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>)>>(
      'tmpfile_s');
  late final _tmpfile_s =
      _tmpfile_sPtr.asFunction<int Function(ffi.Pointer<ffi.Pointer<FILE>>)>();

  int tmpnam_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _tmpnam_s(
      _Buffer,
      _Size,
    );
  }

  late final _tmpnam_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Char>, rsize_t)>>(
      'tmpnam_s');
  late final _tmpnam_s =
      _tmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void clearerr(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr(
      _Stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fclose(
      _Stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fcloseall() {
    return __fcloseall();
  }

  late final __fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_fcloseall');
  late final __fcloseall = __fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> _fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __fdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('_fdopen');
  late final __fdopen = __fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int feof(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _feof(
      _Stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ferror(
      _Stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fflush(
      _Stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetc(
      _Stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetchar() {
    return __fgetchar();
  }

  late final __fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_fgetchar');
  late final __fgetchar = __fgetcharPtr.asFunction<int Function()>();

  int fgetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fgetpos(
      _Stream,
      _Position,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> _Buffer,
    int _MaxCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgets(
      _Buffer,
      _MaxCount,
      _Stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int _fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fileno(
      _Stream,
    );
  }

  late final __filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fileno');
  late final __fileno =
      __filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _flushall() {
    return __flushall();
  }

  late final __flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_flushall');
  late final __flushall = __flushallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen(
      _FileName,
      _Mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputc(
      _Character,
      _Stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputchar(
    int _Character,
  ) {
    return __fputchar(
      _Character,
    );
  }

  late final __fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_fputchar');
  late final __fputchar = __fputcharPtr.asFunction<int Function(int)>();

  int fputs(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputs(
      _Buffer,
      _Stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _freopen(
      _FileName,
      _Mode,
      _Stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _fsopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    int _ShFlag,
  ) {
    return __fsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __fsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_fsopen');
  late final __fsopen = __fsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fsetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fsetpos(
      _Stream,
      _Position,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fseek(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.LongLong, ffi.Int)>>('_fseeki64');
  late final __fseeki64 =
      __fseeki64Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftell(
      _Stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64(
      _Stream,
    );
  }

  late final __ftelli64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<FILE>)>>(
          '_ftelli64');
  late final __ftelli64 =
      __ftelli64Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fwrite(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getc(
      _Stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int _getmaxstdio() {
    return __getmaxstdio();
  }

  late final __getmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_getmaxstdio');
  late final __getmaxstdio = __getmaxstdioPtr.asFunction<int Function()>();

  int _getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getw(
      _Stream,
    );
  }

  late final __getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('_getw');
  late final __getw = __getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> _ErrorMessage,
  ) {
    return _perror(
      _ErrorMessage,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int _pclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __pclose(
      _Stream,
    );
  }

  late final __pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_pclose');
  late final __pclose =
      __pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _popen(
    ffi.Pointer<ffi.Char> _Command,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __popen(
      _Command,
      _Mode,
    );
  }

  late final __popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_popen');
  late final __popen = __popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int putc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putc(
      _Character,
      _Stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int _Character,
  ) {
    return _putchar(
      _Character,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _puts(
      _Buffer,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putw(
    int _Word,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putw(
      _Word,
      _Stream,
    );
  }

  late final __putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_putw');
  late final __putw =
      __putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int remove(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _remove(
      _FileName,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> _OldFileName,
    ffi.Pointer<ffi.Char> _NewFileName,
  ) {
    return _rename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return __unlink(
      _FileName,
    );
  }

  late final __unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          '_unlink');
  late final __unlink =
      __unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _unlink1(
      _FileName,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink1 =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _rewind(
      _Stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _rmtmp() {
    return __rmtmp();
  }

  late final __rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_rmtmp');
  late final __rmtmp = __rmtmpPtr.asFunction<int Function()>();

  void setbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _setbuf(
      _Stream,
      _Buffer,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int _setmaxstdio(
    int _Maximum,
  ) {
    return __setmaxstdio(
      _Maximum,
    );
  }

  late final __setmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_setmaxstdio');
  late final __setmaxstdio = __setmaxstdioPtr.asFunction<int Function(int)>();

  int setvbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Mode,
    int _Size,
  ) {
    return _setvbuf(
      _Stream,
      _Buffer,
      _Mode,
      _Size,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _tempnam(
    ffi.Pointer<ffi.Char> _DirectoryName,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return __tempnam(
      _DirectoryName,
      _FilePrefix,
    );
  }

  late final __tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_tempnam');
  late final __tempnam = __tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _tmpnam(
      _Buffer,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetc(
      _Character,
      _Stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void _lock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __lock_file(
      _Stream,
    );
  }

  late final __lock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_lock_file');
  late final __lock_file =
      __lock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void _unlock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __unlock_file(
      _Stream,
    );
  }

  late final __unlock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_unlock_file');
  late final __unlock_file =
      __unlock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _fclose_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fclose_nolock(
      _Stream,
    );
  }

  late final __fclose_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fclose_nolock');
  late final __fclose_nolock =
      __fclose_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fflush_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fflush_nolock(
      _Stream,
    );
  }

  late final __fflush_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fflush_nolock');
  late final __fflush_nolock =
      __fflush_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetc_nolock(
      _Stream,
    );
  }

  late final __fgetc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fgetc_nolock');
  late final __fgetc_nolock =
      __fgetc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_fputc_nolock');
  late final __fputc_nolock =
      __fputc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fread_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fread_nolock');
  late final __fread_nolock = __fread_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _fread_nolock_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolock_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fread_nolock_s');
  late final __fread_nolock_s = __fread_nolock_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int _fseek_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseek_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseek_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('_fseek_nolock');
  late final __fseek_nolock =
      __fseek_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.LongLong, ffi.Int)>>('_fseeki64_nolock');
  late final __fseeki64_nolock = __fseeki64_nolockPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _ftell_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftell_nolock(
      _Stream,
    );
  }

  late final __ftell_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          '_ftell_nolock');
  late final __ftell_nolock =
      __ftell_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64_nolock(
      _Stream,
    );
  }

  late final __ftelli64_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<FILE>)>>(
          '_ftelli64_nolock');
  late final __ftelli64_nolock =
      __ftelli64_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fwrite_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fwrite_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fwrite_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fwrite_nolock');
  late final __fwrite_nolock = __fwrite_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _getc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getc_nolock(
      _Stream,
    );
  }

  late final __getc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_getc_nolock');
  late final __getc_nolock =
      __getc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_putc_nolock');
  late final __putc_nolock =
      __putc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_ungetc_nolock');
  late final __ungetc_nolock =
      __ungetc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int> __p__commode() {
    return ___p__commode();
  }

  late final ___p__commodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p__commode');
  late final ___p__commode =
      ___p__commodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int __stdio_common_vfprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf');
  late final ___stdio_common_vfprintf = ___stdio_common_vfprintfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vfprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_s');
  late final ___stdio_common_vfprintf_s =
      ___stdio_common_vfprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t,
              va_list)>();

  int __stdio_common_vfprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_p');
  late final ___stdio_common_vfprintf_p =
      ___stdio_common_vfprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t,
              va_list)>();

  int _set_printf_count_output(
    int _Value,
  ) {
    return __set_printf_count_output(
      _Value,
    );
  }

  late final __set_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_printf_count_output');
  late final __set_printf_count_output =
      __set_printf_count_outputPtr.asFunction<int Function(int)>();

  int _get_printf_count_output() {
    return __get_printf_count_output();
  }

  late final __get_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          '_get_printf_count_output');
  late final __get_printf_count_output =
      __get_printf_count_outputPtr.asFunction<int Function()>();

  int __stdio_common_vfscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _Arglist,
  ) {
    return ___stdio_common_vfscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _Arglist,
    );
  }

  late final ___stdio_common_vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfscanf');
  late final ___stdio_common_vfscanf = ___stdio_common_vfscanfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vsprintf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf');
  late final ___stdio_common_vsprintf = ___stdio_common_vsprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          _locale_t, va_list)>();

  int __stdio_common_vsprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_s');
  late final ___stdio_common_vsprintf_s =
      ___stdio_common_vsprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              _locale_t, va_list)>();

  int __stdio_common_vsnprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsnprintf_s');
  late final ___stdio_common_vsnprintf_s =
      ___stdio_common_vsnprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vsprintf_p(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_p');
  late final ___stdio_common_vsprintf_p =
      ___stdio_common_vsprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              _locale_t, va_list)>();

  int __stdio_common_vsscanf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsscanf');
  late final ___stdio_common_vsscanf = ___stdio_common_vsscanfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          _locale_t, va_list)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> _Directory,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return _tempnam1(
      _Directory,
      _FilePrefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam1 = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fcloseall() {
    return _fcloseall1();
  }

  late final _fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fcloseall');
  late final _fcloseall1 = _fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Format,
  ) {
    return _fdopen1(
      _FileHandle,
      _Format,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen1 = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fgetchar() {
    return _fgetchar1();
  }

  late final _fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fgetchar');
  late final _fgetchar1 = _fgetcharPtr.asFunction<int Function()>();

  int fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fileno1(
      _Stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno1 =
      _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int flushall() {
    return _flushall1();
  }

  late final _flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('flushall');
  late final _flushall1 = _flushallPtr.asFunction<int Function()>();

  int fputchar(
    int _Ch,
  ) {
    return _fputchar1(
      _Ch,
    );
  }

  late final _fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fputchar');
  late final _fputchar1 = _fputcharPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getw1(
      _Stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw1 = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int _Ch,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putw1(
      _Ch,
      _Stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw1 =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int rmtmp() {
    return _rmtmp1();
  }

  late final _rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rmtmp');
  late final _rmtmp1 = _rmtmpPtr.asFunction<int Function()>();

  ffi.Pointer<PGconn> PQconnectStart(
    ffi.Pointer<ffi.Char> conninfo,
  ) {
    return _PQconnectStart(
      conninfo,
    );
  }

  late final _PQconnectStartPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<PGconn> Function(ffi.Pointer<ffi.Char>)>>(
      'PQconnectStart');
  late final _PQconnectStart = _PQconnectStartPtr.asFunction<
      ffi.Pointer<PGconn> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PGconn> PQconnectStartParams(
    ffi.Pointer<ffi.Pointer<ffi.Char>> keywords,
    ffi.Pointer<ffi.Pointer<ffi.Char>> values,
    int expand_dbname,
  ) {
    return _PQconnectStartParams(
      keywords,
      values,
      expand_dbname,
    );
  }

  late final _PQconnectStartParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGconn> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('PQconnectStartParams');
  late final _PQconnectStartParams = _PQconnectStartParamsPtr.asFunction<
      ffi.Pointer<PGconn> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int PQconnectPoll(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQconnectPoll(
      conn,
    );
  }

  late final _PQconnectPollPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PGconn>)>>(
          'PQconnectPoll');
  late final _PQconnectPoll =
      _PQconnectPollPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<PGconn> PQconnectdb(
    ffi.Pointer<ffi.Char> conninfo,
  ) {
    return _PQconnectdb(
      conninfo,
    );
  }

  late final _PQconnectdbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGconn> Function(ffi.Pointer<ffi.Char>)>>('PQconnectdb');
  late final _PQconnectdb = _PQconnectdbPtr.asFunction<
      ffi.Pointer<PGconn> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PGconn> PQconnectdbParams(
    ffi.Pointer<ffi.Pointer<ffi.Char>> keywords,
    ffi.Pointer<ffi.Pointer<ffi.Char>> values,
    int expand_dbname,
  ) {
    return _PQconnectdbParams(
      keywords,
      values,
      expand_dbname,
    );
  }

  late final _PQconnectdbParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGconn> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('PQconnectdbParams');
  late final _PQconnectdbParams = _PQconnectdbParamsPtr.asFunction<
      ffi.Pointer<PGconn> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<PGconn> PQsetdbLogin(
    ffi.Pointer<ffi.Char> pghost,
    ffi.Pointer<ffi.Char> pgport,
    ffi.Pointer<ffi.Char> pgoptions,
    ffi.Pointer<ffi.Char> pgtty,
    ffi.Pointer<ffi.Char> dbName,
    ffi.Pointer<ffi.Char> login,
    ffi.Pointer<ffi.Char> pwd,
  ) {
    return _PQsetdbLogin(
      pghost,
      pgport,
      pgoptions,
      pgtty,
      dbName,
      login,
      pwd,
    );
  }

  late final _PQsetdbLoginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGconn> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PQsetdbLogin');
  late final _PQsetdbLogin = _PQsetdbLoginPtr.asFunction<
      ffi.Pointer<PGconn> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void PQfinish(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQfinish(
      conn,
    );
  }

  late final _PQfinishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PGconn>)>>(
          'PQfinish');
  late final _PQfinish =
      _PQfinishPtr.asFunction<void Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<PQconninfoOption> PQconndefaults() {
    return _PQconndefaults();
  }

  late final _PQconndefaultsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PQconninfoOption> Function()>>(
          'PQconndefaults');
  late final _PQconndefaults =
      _PQconndefaultsPtr.asFunction<ffi.Pointer<PQconninfoOption> Function()>();

  ffi.Pointer<PQconninfoOption> PQconninfoParse(
    ffi.Pointer<ffi.Char> conninfo,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errmsg,
  ) {
    return _PQconninfoParse(
      conninfo,
      errmsg,
    );
  }

  late final _PQconninfoParsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PQconninfoOption> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('PQconninfoParse');
  late final _PQconninfoParse = _PQconninfoParsePtr.asFunction<
      ffi.Pointer<PQconninfoOption> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<PQconninfoOption> PQconninfo(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQconninfo(
      conn,
    );
  }

  late final _PQconninfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PQconninfoOption> Function(
              ffi.Pointer<PGconn>)>>('PQconninfo');
  late final _PQconninfo = _PQconninfoPtr.asFunction<
      ffi.Pointer<PQconninfoOption> Function(ffi.Pointer<PGconn>)>();

  void PQconninfoFree(
    ffi.Pointer<PQconninfoOption> connOptions,
  ) {
    return _PQconninfoFree(
      connOptions,
    );
  }

  late final _PQconninfoFreePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PQconninfoOption>)>>(
      'PQconninfoFree');
  late final _PQconninfoFree = _PQconninfoFreePtr.asFunction<
      void Function(ffi.Pointer<PQconninfoOption>)>();

  int PQresetStart(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQresetStart(
      conn,
    );
  }

  late final _PQresetStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQresetStart');
  late final _PQresetStart =
      _PQresetStartPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQresetPoll(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQresetPoll(
      conn,
    );
  }

  late final _PQresetPollPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PGconn>)>>(
          'PQresetPoll');
  late final _PQresetPoll =
      _PQresetPollPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  void PQreset(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQreset(
      conn,
    );
  }

  late final _PQresetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PGconn>)>>(
          'PQreset');
  late final _PQreset =
      _PQresetPtr.asFunction<void Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<PGcancel> PQgetCancel(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQgetCancel(
      conn,
    );
  }

  late final _PQgetCancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGcancel> Function(ffi.Pointer<PGconn>)>>('PQgetCancel');
  late final _PQgetCancel = _PQgetCancelPtr.asFunction<
      ffi.Pointer<PGcancel> Function(ffi.Pointer<PGconn>)>();

  void PQfreeCancel(
    ffi.Pointer<PGcancel> cancel,
  ) {
    return _PQfreeCancel(
      cancel,
    );
  }

  late final _PQfreeCancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PGcancel>)>>(
          'PQfreeCancel');
  late final _PQfreeCancel =
      _PQfreeCancelPtr.asFunction<void Function(ffi.Pointer<PGcancel>)>();

  int PQcancel(
    ffi.Pointer<PGcancel> cancel,
    ffi.Pointer<ffi.Char> errbuf,
    int errbufsize,
  ) {
    return _PQcancel(
      cancel,
      errbuf,
      errbufsize,
    );
  }

  late final _PQcancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGcancel>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('PQcancel');
  late final _PQcancel = _PQcancelPtr.asFunction<
      int Function(ffi.Pointer<PGcancel>, ffi.Pointer<ffi.Char>, int)>();

  int PQrequestCancel(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQrequestCancel(
      conn,
    );
  }

  late final _PQrequestCancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQrequestCancel');
  late final _PQrequestCancel =
      _PQrequestCancelPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQdb(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQdb(
      conn,
    );
  }

  late final _PQdbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQdb');
  late final _PQdb = _PQdbPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQuser(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQuser(
      conn,
    );
  }

  late final _PQuserPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQuser');
  late final _PQuser = _PQuserPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQpass(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQpass(
      conn,
    );
  }

  late final _PQpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQpass');
  late final _PQpass = _PQpassPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQhost(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQhost(
      conn,
    );
  }

  late final _PQhostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQhost');
  late final _PQhost = _PQhostPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQhostaddr(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQhostaddr(
      conn,
    );
  }

  late final _PQhostaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQhostaddr');
  late final _PQhostaddr = _PQhostaddrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQport(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQport(
      conn,
    );
  }

  late final _PQportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQport');
  late final _PQport = _PQportPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQtty(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQtty(
      conn,
    );
  }

  late final _PQttyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQtty');
  late final _PQtty = _PQttyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQoptions(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQoptions(
      conn,
    );
  }

  late final _PQoptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>('PQoptions');
  late final _PQoptions = _PQoptionsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  int PQstatus(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQstatus(
      conn,
    );
  }

  late final _PQstatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PGconn>)>>(
          'PQstatus');
  late final _PQstatus =
      _PQstatusPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQtransactionStatus(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQtransactionStatus(
      conn,
    );
  }

  late final _PQtransactionStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PGconn>)>>(
          'PQtransactionStatus');
  late final _PQtransactionStatus =
      _PQtransactionStatusPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQparameterStatus(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> paramName,
  ) {
    return _PQparameterStatus(
      conn,
      paramName,
    );
  }

  late final _PQparameterStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>)>>('PQparameterStatus');
  late final _PQparameterStatus = _PQparameterStatusPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQprotocolVersion(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQprotocolVersion(
      conn,
    );
  }

  late final _PQprotocolVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQprotocolVersion');
  late final _PQprotocolVersion =
      _PQprotocolVersionPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQserverVersion(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQserverVersion(
      conn,
    );
  }

  late final _PQserverVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQserverVersion');
  late final _PQserverVersion =
      _PQserverVersionPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Char> PQerrorMessage(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQerrorMessage(
      conn,
    );
  }

  late final _PQerrorMessagePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>>(
      'PQerrorMessage');
  late final _PQerrorMessage = _PQerrorMessagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>)>();

  int PQsocket(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQsocket(
      conn,
    );
  }

  late final _PQsocketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQsocket');
  late final _PQsocket =
      _PQsocketPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQbackendPID(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQbackendPID(
      conn,
    );
  }

  late final _PQbackendPIDPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQbackendPID');
  late final _PQbackendPID =
      _PQbackendPIDPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQpipelineStatus(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQpipelineStatus(
      conn,
    );
  }

  late final _PQpipelineStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PGconn>)>>(
          'PQpipelineStatus');
  late final _PQpipelineStatus =
      _PQpipelineStatusPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQconnectionNeedsPassword(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQconnectionNeedsPassword(
      conn,
    );
  }

  late final _PQconnectionNeedsPasswordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQconnectionNeedsPassword');
  late final _PQconnectionNeedsPassword = _PQconnectionNeedsPasswordPtr
      .asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQconnectionUsedPassword(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQconnectionUsedPassword(
      conn,
    );
  }

  late final _PQconnectionUsedPasswordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQconnectionUsedPassword');
  late final _PQconnectionUsedPassword = _PQconnectionUsedPasswordPtr
      .asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQconnectionUsedGSSAPI(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQconnectionUsedGSSAPI(
      conn,
    );
  }

  late final _PQconnectionUsedGSSAPIPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQconnectionUsedGSSAPI');
  late final _PQconnectionUsedGSSAPI = _PQconnectionUsedGSSAPIPtr.asFunction<
      int Function(ffi.Pointer<PGconn>)>();

  int PQclientEncoding(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQclientEncoding(
      conn,
    );
  }

  late final _PQclientEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQclientEncoding');
  late final _PQclientEncoding =
      _PQclientEncodingPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQsetClientEncoding(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> encoding,
  ) {
    return _PQsetClientEncoding(
      conn,
      encoding,
    );
  }

  late final _PQsetClientEncodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>)>>('PQsetClientEncoding');
  late final _PQsetClientEncoding = _PQsetClientEncodingPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQsslInUse(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQsslInUse(
      conn,
    );
  }

  late final _PQsslInUsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQsslInUse');
  late final _PQsslInUse =
      _PQsslInUsePtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Void> PQsslStruct(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> struct_name,
  ) {
    return _PQsslStruct(
      conn,
      struct_name,
    );
  }

  late final _PQsslStructPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQsslStruct');
  late final _PQsslStruct = _PQsslStructPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> PQsslAttribute(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> attribute_name,
  ) {
    return _PQsslAttribute(
      conn,
      attribute_name,
    );
  }

  late final _PQsslAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQsslAttribute');
  late final _PQsslAttribute = _PQsslAttributePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> PQsslAttributeNames(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQsslAttributeNames(
      conn,
    );
  }

  late final _PQsslAttributeNamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<PGconn>)>>('PQsslAttributeNames');
  late final _PQsslAttributeNames = _PQsslAttributeNamesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Void> PQgetssl(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQgetssl(
      conn,
    );
  }

  late final _PQgetsslPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<PGconn>)>>('PQgetssl');
  late final _PQgetssl = _PQgetsslPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PGconn>)>();

  void PQinitSSL(
    int do_init,
  ) {
    return _PQinitSSL(
      do_init,
    );
  }

  late final _PQinitSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('PQinitSSL');
  late final _PQinitSSL = _PQinitSSLPtr.asFunction<void Function(int)>();

  void PQinitOpenSSL(
    int do_ssl,
    int do_crypto,
  ) {
    return _PQinitOpenSSL(
      do_ssl,
      do_crypto,
    );
  }

  late final _PQinitOpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'PQinitOpenSSL');
  late final _PQinitOpenSSL =
      _PQinitOpenSSLPtr.asFunction<void Function(int, int)>();

  int PQgssEncInUse(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQgssEncInUse(
      conn,
    );
  }

  late final _PQgssEncInUsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQgssEncInUse');
  late final _PQgssEncInUse =
      _PQgssEncInUsePtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<ffi.Void> PQgetgssctx(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQgetgssctx(
      conn,
    );
  }

  late final _PQgetgssctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<PGconn>)>>('PQgetgssctx');
  late final _PQgetgssctx = _PQgetgssctxPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PGconn>)>();

  int PQsetErrorVerbosity(
    ffi.Pointer<PGconn> conn,
    int verbosity,
  ) {
    return _PQsetErrorVerbosity(
      conn,
      verbosity,
    );
  }

  late final _PQsetErrorVerbosityPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<PGconn>, ffi.Int32)>>(
      'PQsetErrorVerbosity');
  late final _PQsetErrorVerbosity = _PQsetErrorVerbosityPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, int)>();

  int PQsetErrorContextVisibility(
    ffi.Pointer<PGconn> conn,
    int show_context,
  ) {
    return _PQsetErrorContextVisibility(
      conn,
      show_context,
    );
  }

  late final _PQsetErrorContextVisibilityPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<PGconn>, ffi.Int32)>>(
      'PQsetErrorContextVisibility');
  late final _PQsetErrorContextVisibility = _PQsetErrorContextVisibilityPtr
      .asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  PQnoticeReceiver PQsetNoticeReceiver(
    ffi.Pointer<PGconn> conn,
    PQnoticeReceiver proc,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _PQsetNoticeReceiver(
      conn,
      proc,
      arg,
    );
  }

  late final _PQsetNoticeReceiverPtr = _lookup<
      ffi.NativeFunction<
          PQnoticeReceiver Function(ffi.Pointer<PGconn>, PQnoticeReceiver,
              ffi.Pointer<ffi.Void>)>>('PQsetNoticeReceiver');
  late final _PQsetNoticeReceiver = _PQsetNoticeReceiverPtr.asFunction<
      PQnoticeReceiver Function(
          ffi.Pointer<PGconn>, PQnoticeReceiver, ffi.Pointer<ffi.Void>)>();

  PQnoticeProcessor PQsetNoticeProcessor(
    ffi.Pointer<PGconn> conn,
    PQnoticeProcessor proc,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _PQsetNoticeProcessor(
      conn,
      proc,
      arg,
    );
  }

  late final _PQsetNoticeProcessorPtr = _lookup<
      ffi.NativeFunction<
          PQnoticeProcessor Function(ffi.Pointer<PGconn>, PQnoticeProcessor,
              ffi.Pointer<ffi.Void>)>>('PQsetNoticeProcessor');
  late final _PQsetNoticeProcessor = _PQsetNoticeProcessorPtr.asFunction<
      PQnoticeProcessor Function(
          ffi.Pointer<PGconn>, PQnoticeProcessor, ffi.Pointer<ffi.Void>)>();

  pgthreadlock_t PQregisterThreadLock(
    pgthreadlock_t newhandler,
  ) {
    return _PQregisterThreadLock(
      newhandler,
    );
  }

  late final _PQregisterThreadLockPtr =
      _lookup<ffi.NativeFunction<pgthreadlock_t Function(pgthreadlock_t)>>(
          'PQregisterThreadLock');
  late final _PQregisterThreadLock = _PQregisterThreadLockPtr.asFunction<
      pgthreadlock_t Function(pgthreadlock_t)>();

  void PQtrace(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<FILE> debug_port,
  ) {
    return _PQtrace(
      conn,
      debug_port,
    );
  }

  late final _PQtracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PGconn>, ffi.Pointer<FILE>)>>('PQtrace');
  late final _PQtrace = _PQtracePtr.asFunction<
      void Function(ffi.Pointer<PGconn>, ffi.Pointer<FILE>)>();

  void PQuntrace(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQuntrace(
      conn,
    );
  }

  late final _PQuntracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PGconn>)>>(
          'PQuntrace');
  late final _PQuntrace =
      _PQuntracePtr.asFunction<void Function(ffi.Pointer<PGconn>)>();

  void PQsetTraceFlags(
    ffi.Pointer<PGconn> conn,
    int flags,
  ) {
    return _PQsetTraceFlags(
      conn,
      flags,
    );
  }

  late final _PQsetTraceFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PGconn>, ffi.Int)>>(
      'PQsetTraceFlags');
  late final _PQsetTraceFlags =
      _PQsetTraceFlagsPtr.asFunction<void Function(ffi.Pointer<PGconn>, int)>();

  ffi.Pointer<PGresult> PQexec(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> query,
  ) {
    return _PQexec(
      conn,
      query,
    );
  }

  late final _PQexecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQexec');
  late final _PQexec = _PQexecPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PGresult> PQexecParams(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> command,
    int nParams,
    ffi.Pointer<Oid> paramTypes,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paramValues,
    ffi.Pointer<ffi.Int> paramLengths,
    ffi.Pointer<ffi.Int> paramFormats,
    int resultFormat,
  ) {
    return _PQexecParams(
      conn,
      command,
      nParams,
      paramTypes,
      paramValues,
      paramLengths,
      paramFormats,
      resultFormat,
    );
  }

  late final _PQexecParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<Oid>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('PQexecParams');
  late final _PQexecParams = _PQexecParamsPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<Oid>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  ffi.Pointer<PGresult> PQprepare(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmtName,
    ffi.Pointer<ffi.Char> query,
    int nParams,
    ffi.Pointer<Oid> paramTypes,
  ) {
    return _PQprepare(
      conn,
      stmtName,
      query,
      nParams,
      paramTypes,
    );
  }

  late final _PQpreparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<Oid>)>>('PQprepare');
  late final _PQprepare = _PQpreparePtr.asFunction<
      ffi.Pointer<PGresult> Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<Oid>)>();

  ffi.Pointer<PGresult> PQexecPrepared(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmtName,
    int nParams,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paramValues,
    ffi.Pointer<ffi.Int> paramLengths,
    ffi.Pointer<ffi.Int> paramFormats,
    int resultFormat,
  ) {
    return _PQexecPrepared(
      conn,
      stmtName,
      nParams,
      paramValues,
      paramLengths,
      paramFormats,
      resultFormat,
    );
  }

  late final _PQexecPreparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('PQexecPrepared');
  late final _PQexecPrepared = _PQexecPreparedPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int PQsendQuery(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> query,
  ) {
    return _PQsendQuery(
      conn,
      query,
    );
  }

  late final _PQsendQueryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQsendQuery');
  late final _PQsendQuery = _PQsendQueryPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQsendQueryParams(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> command,
    int nParams,
    ffi.Pointer<Oid> paramTypes,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paramValues,
    ffi.Pointer<ffi.Int> paramLengths,
    ffi.Pointer<ffi.Int> paramFormats,
    int resultFormat,
  ) {
    return _PQsendQueryParams(
      conn,
      command,
      nParams,
      paramTypes,
      paramValues,
      paramLengths,
      paramFormats,
      resultFormat,
    );
  }

  late final _PQsendQueryParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<Oid>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('PQsendQueryParams');
  late final _PQsendQueryParams = _PQsendQueryParamsPtr.asFunction<
      int Function(
          ffi.Pointer<PGconn>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<Oid>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int PQsendPrepare(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmtName,
    ffi.Pointer<ffi.Char> query,
    int nParams,
    ffi.Pointer<Oid> paramTypes,
  ) {
    return _PQsendPrepare(
      conn,
      stmtName,
      query,
      nParams,
      paramTypes,
    );
  }

  late final _PQsendPreparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<Oid>)>>('PQsendPrepare');
  late final _PQsendPrepare = _PQsendPreparePtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<Oid>)>();

  int PQsendQueryPrepared(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmtName,
    int nParams,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paramValues,
    ffi.Pointer<ffi.Int> paramLengths,
    ffi.Pointer<ffi.Int> paramFormats,
    int resultFormat,
  ) {
    return _PQsendQueryPrepared(
      conn,
      stmtName,
      nParams,
      paramValues,
      paramLengths,
      paramFormats,
      resultFormat,
    );
  }

  late final _PQsendQueryPreparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('PQsendQueryPrepared');
  late final _PQsendQueryPrepared = _PQsendQueryPreparedPtr.asFunction<
      int Function(
          ffi.Pointer<PGconn>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int PQsetSingleRowMode(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQsetSingleRowMode(
      conn,
    );
  }

  late final _PQsetSingleRowModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQsetSingleRowMode');
  late final _PQsetSingleRowMode =
      _PQsetSingleRowModePtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<PGresult> PQgetResult(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQgetResult(
      conn,
    );
  }

  late final _PQgetResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(ffi.Pointer<PGconn>)>>('PQgetResult');
  late final _PQgetResult = _PQgetResultPtr.asFunction<
      ffi.Pointer<PGresult> Function(ffi.Pointer<PGconn>)>();

  int PQisBusy(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQisBusy(
      conn,
    );
  }

  late final _PQisBusyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQisBusy');
  late final _PQisBusy =
      _PQisBusyPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQconsumeInput(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQconsumeInput(
      conn,
    );
  }

  late final _PQconsumeInputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQconsumeInput');
  late final _PQconsumeInput =
      _PQconsumeInputPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQenterPipelineMode(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQenterPipelineMode(
      conn,
    );
  }

  late final _PQenterPipelineModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQenterPipelineMode');
  late final _PQenterPipelineMode =
      _PQenterPipelineModePtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQexitPipelineMode(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQexitPipelineMode(
      conn,
    );
  }

  late final _PQexitPipelineModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQexitPipelineMode');
  late final _PQexitPipelineMode =
      _PQexitPipelineModePtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQpipelineSync(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQpipelineSync(
      conn,
    );
  }

  late final _PQpipelineSyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQpipelineSync');
  late final _PQpipelineSync =
      _PQpipelineSyncPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQsendFlushRequest(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQsendFlushRequest(
      conn,
    );
  }

  late final _PQsendFlushRequestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQsendFlushRequest');
  late final _PQsendFlushRequest =
      _PQsendFlushRequestPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<PGnotify> PQnotifies(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQnotifies(
      conn,
    );
  }

  late final _PQnotifiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGnotify> Function(ffi.Pointer<PGconn>)>>('PQnotifies');
  late final _PQnotifies = _PQnotifiesPtr.asFunction<
      ffi.Pointer<PGnotify> Function(ffi.Pointer<PGconn>)>();

  int PQputCopyData(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> buffer,
    int nbytes,
  ) {
    return _PQputCopyData(
      conn,
      buffer,
      nbytes,
    );
  }

  late final _PQputCopyDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('PQputCopyData');
  late final _PQputCopyData = _PQputCopyDataPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, int)>();

  int PQputCopyEnd(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> errormsg,
  ) {
    return _PQputCopyEnd(
      conn,
      errormsg,
    );
  }

  late final _PQputCopyEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQputCopyEnd');
  late final _PQputCopyEnd = _PQputCopyEndPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQgetCopyData(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buffer,
    int async1,
  ) {
    return _PQgetCopyData(
      conn,
      buffer,
      async1,
    );
  }

  late final _PQgetCopyDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('PQgetCopyData');
  late final _PQgetCopyData = _PQgetCopyDataPtr.asFunction<
      int Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int PQgetline(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> buffer,
    int length,
  ) {
    return _PQgetline(
      conn,
      buffer,
      length,
    );
  }

  late final _PQgetlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('PQgetline');
  late final _PQgetline = _PQgetlinePtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, int)>();

  int PQputline(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _PQputline(
      conn,
      string,
    );
  }

  late final _PQputlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQputline');
  late final _PQputline = _PQputlinePtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQgetlineAsync(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> buffer,
    int bufsize,
  ) {
    return _PQgetlineAsync(
      conn,
      buffer,
      bufsize,
    );
  }

  late final _PQgetlineAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('PQgetlineAsync');
  late final _PQgetlineAsync = _PQgetlineAsyncPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, int)>();

  int PQputnbytes(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> buffer,
    int nbytes,
  ) {
    return _PQputnbytes(
      conn,
      buffer,
      nbytes,
    );
  }

  late final _PQputnbytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('PQputnbytes');
  late final _PQputnbytes = _PQputnbytesPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, int)>();

  int PQendcopy(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQendcopy(
      conn,
    );
  }

  late final _PQendcopyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQendcopy');
  late final _PQendcopy =
      _PQendcopyPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQsetnonblocking(
    ffi.Pointer<PGconn> conn,
    int arg,
  ) {
    return _PQsetnonblocking(
      conn,
      arg,
    );
  }

  late final _PQsetnonblockingPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>, ffi.Int)>>(
      'PQsetnonblocking');
  late final _PQsetnonblocking =
      _PQsetnonblockingPtr.asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  int PQisnonblocking(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQisnonblocking(
      conn,
    );
  }

  late final _PQisnonblockingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQisnonblocking');
  late final _PQisnonblocking =
      _PQisnonblockingPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  int PQisthreadsafe() {
    return _PQisthreadsafe();
  }

  late final _PQisthreadsafePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('PQisthreadsafe');
  late final _PQisthreadsafe = _PQisthreadsafePtr.asFunction<int Function()>();

  int PQping(
    ffi.Pointer<ffi.Char> conninfo,
  ) {
    return _PQping(
      conninfo,
    );
  }

  late final _PQpingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'PQping');
  late final _PQping =
      _PQpingPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int PQpingParams(
    ffi.Pointer<ffi.Pointer<ffi.Char>> keywords,
    ffi.Pointer<ffi.Pointer<ffi.Char>> values,
    int expand_dbname,
  ) {
    return _PQpingParams(
      keywords,
      values,
      expand_dbname,
    );
  }

  late final _PQpingParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('PQpingParams');
  late final _PQpingParams = _PQpingParamsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int PQflush(
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQflush(
      conn,
    );
  }

  late final _PQflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>)>>(
          'PQflush');
  late final _PQflush =
      _PQflushPtr.asFunction<int Function(ffi.Pointer<PGconn>)>();

  ffi.Pointer<PGresult> PQfn(
    ffi.Pointer<PGconn> conn,
    int fnid,
    ffi.Pointer<ffi.Int> result_buf,
    ffi.Pointer<ffi.Int> result_len,
    int result_is_int,
    ffi.Pointer<PQArgBlock> args,
    int nargs,
  ) {
    return _PQfn(
      conn,
      fnid,
      result_buf,
      result_len,
      result_is_int,
      args,
      nargs,
    );
  }

  late final _PQfnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Pointer<PQArgBlock>,
              ffi.Int)>>('PQfn');
  late final _PQfn = _PQfnPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int,
          ffi.Pointer<PQArgBlock>,
          int)>();

  int PQresultStatus(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQresultStatus(
      res,
    );
  }

  late final _PQresultStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PGresult>)>>(
          'PQresultStatus');
  late final _PQresultStatus =
      _PQresultStatusPtr.asFunction<int Function(ffi.Pointer<PGresult>)>();

  ffi.Pointer<ffi.Char> PQresStatus(
    int status,
  ) {
    return _PQresStatus(
      status,
    );
  }

  late final _PQresStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'PQresStatus');
  late final _PQresStatus =
      _PQresStatusPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> PQresultErrorMessage(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQresultErrorMessage(
      res,
    );
  }

  late final _PQresultErrorMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGresult>)>>('PQresultErrorMessage');
  late final _PQresultErrorMessage = _PQresultErrorMessagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>)>();

  ffi.Pointer<ffi.Char> PQresultVerboseErrorMessage(
    ffi.Pointer<PGresult> res,
    int verbosity,
    int show_context,
  ) {
    return _PQresultVerboseErrorMessage(
      res,
      verbosity,
      show_context,
    );
  }

  late final _PQresultVerboseErrorMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>, ffi.Int32,
              ffi.Int32)>>('PQresultVerboseErrorMessage');
  late final _PQresultVerboseErrorMessage =
      _PQresultVerboseErrorMessagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>, int, int)>();

  ffi.Pointer<ffi.Char> PQresultErrorField(
    ffi.Pointer<PGresult> res,
    int fieldcode,
  ) {
    return _PQresultErrorField(
      res,
      fieldcode,
    );
  }

  late final _PQresultErrorFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGresult>, ffi.Int)>>('PQresultErrorField');
  late final _PQresultErrorField = _PQresultErrorFieldPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>, int)>();

  int PQntuples(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQntuples(
      res,
    );
  }

  late final _PQntuplesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>)>>(
          'PQntuples');
  late final _PQntuples =
      _PQntuplesPtr.asFunction<int Function(ffi.Pointer<PGresult>)>();

  int PQnfields(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQnfields(
      res,
    );
  }

  late final _PQnfieldsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>)>>(
          'PQnfields');
  late final _PQnfields =
      _PQnfieldsPtr.asFunction<int Function(ffi.Pointer<PGresult>)>();

  int PQbinaryTuples(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQbinaryTuples(
      res,
    );
  }

  late final _PQbinaryTuplesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>)>>(
          'PQbinaryTuples');
  late final _PQbinaryTuples =
      _PQbinaryTuplesPtr.asFunction<int Function(ffi.Pointer<PGresult>)>();

  ffi.Pointer<ffi.Char> PQfname(
    ffi.Pointer<PGresult> res,
    int field_num,
  ) {
    return _PQfname(
      res,
      field_num,
    );
  }

  late final _PQfnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGresult>, ffi.Int)>>('PQfname');
  late final _PQfname = _PQfnamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>, int)>();

  int PQfnumber(
    ffi.Pointer<PGresult> res,
    ffi.Pointer<ffi.Char> field_name,
  ) {
    return _PQfnumber(
      res,
      field_name,
    );
  }

  late final _PQfnumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGresult>, ffi.Pointer<ffi.Char>)>>('PQfnumber');
  late final _PQfnumber = _PQfnumberPtr.asFunction<
      int Function(ffi.Pointer<PGresult>, ffi.Pointer<ffi.Char>)>();

  int PQftable(
    ffi.Pointer<PGresult> res,
    int field_num,
  ) {
    return _PQftable(
      res,
      field_num,
    );
  }

  late final _PQftablePtr =
      _lookup<ffi.NativeFunction<Oid Function(ffi.Pointer<PGresult>, ffi.Int)>>(
          'PQftable');
  late final _PQftable =
      _PQftablePtr.asFunction<int Function(ffi.Pointer<PGresult>, int)>();

  int PQftablecol(
    ffi.Pointer<PGresult> res,
    int field_num,
  ) {
    return _PQftablecol(
      res,
      field_num,
    );
  }

  late final _PQftablecolPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>, ffi.Int)>>(
      'PQftablecol');
  late final _PQftablecol =
      _PQftablecolPtr.asFunction<int Function(ffi.Pointer<PGresult>, int)>();

  int PQfformat(
    ffi.Pointer<PGresult> res,
    int field_num,
  ) {
    return _PQfformat(
      res,
      field_num,
    );
  }

  late final _PQfformatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>, ffi.Int)>>(
      'PQfformat');
  late final _PQfformat =
      _PQfformatPtr.asFunction<int Function(ffi.Pointer<PGresult>, int)>();

  int PQftype(
    ffi.Pointer<PGresult> res,
    int field_num,
  ) {
    return _PQftype(
      res,
      field_num,
    );
  }

  late final _PQftypePtr =
      _lookup<ffi.NativeFunction<Oid Function(ffi.Pointer<PGresult>, ffi.Int)>>(
          'PQftype');
  late final _PQftype =
      _PQftypePtr.asFunction<int Function(ffi.Pointer<PGresult>, int)>();

  int PQfsize(
    ffi.Pointer<PGresult> res,
    int field_num,
  ) {
    return _PQfsize(
      res,
      field_num,
    );
  }

  late final _PQfsizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>, ffi.Int)>>(
      'PQfsize');
  late final _PQfsize =
      _PQfsizePtr.asFunction<int Function(ffi.Pointer<PGresult>, int)>();

  int PQfmod(
    ffi.Pointer<PGresult> res,
    int field_num,
  ) {
    return _PQfmod(
      res,
      field_num,
    );
  }

  late final _PQfmodPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>, ffi.Int)>>(
      'PQfmod');
  late final _PQfmod =
      _PQfmodPtr.asFunction<int Function(ffi.Pointer<PGresult>, int)>();

  ffi.Pointer<ffi.Char> PQcmdStatus(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQcmdStatus(
      res,
    );
  }

  late final _PQcmdStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGresult>)>>('PQcmdStatus');
  late final _PQcmdStatus = _PQcmdStatusPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>)>();

  ffi.Pointer<ffi.Char> PQoidStatus(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQoidStatus(
      res,
    );
  }

  late final _PQoidStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGresult>)>>('PQoidStatus');
  late final _PQoidStatus = _PQoidStatusPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>)>();

  int PQoidValue(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQoidValue(
      res,
    );
  }

  late final _PQoidValuePtr =
      _lookup<ffi.NativeFunction<Oid Function(ffi.Pointer<PGresult>)>>(
          'PQoidValue');
  late final _PQoidValue =
      _PQoidValuePtr.asFunction<int Function(ffi.Pointer<PGresult>)>();

  ffi.Pointer<ffi.Char> PQcmdTuples(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQcmdTuples(
      res,
    );
  }

  late final _PQcmdTuplesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGresult>)>>('PQcmdTuples');
  late final _PQcmdTuples = _PQcmdTuplesPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>)>();

  ffi.Pointer<ffi.Char> PQgetvalue(
    ffi.Pointer<PGresult> res,
    int tup_num,
    int field_num,
  ) {
    return _PQgetvalue(
      res,
      tup_num,
      field_num,
    );
  }

  late final _PQgetvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGresult>, ffi.Int, ffi.Int)>>('PQgetvalue');
  late final _PQgetvalue = _PQgetvaluePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGresult>, int, int)>();

  int PQgetlength(
    ffi.Pointer<PGresult> res,
    int tup_num,
    int field_num,
  ) {
    return _PQgetlength(
      res,
      tup_num,
      field_num,
    );
  }

  late final _PQgetlengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGresult>, ffi.Int, ffi.Int)>>('PQgetlength');
  late final _PQgetlength = _PQgetlengthPtr.asFunction<
      int Function(ffi.Pointer<PGresult>, int, int)>();

  int PQgetisnull(
    ffi.Pointer<PGresult> res,
    int tup_num,
    int field_num,
  ) {
    return _PQgetisnull(
      res,
      tup_num,
      field_num,
    );
  }

  late final _PQgetisnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGresult>, ffi.Int, ffi.Int)>>('PQgetisnull');
  late final _PQgetisnull = _PQgetisnullPtr.asFunction<
      int Function(ffi.Pointer<PGresult>, int, int)>();

  int PQnparams(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQnparams(
      res,
    );
  }

  late final _PQnparamsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGresult>)>>(
          'PQnparams');
  late final _PQnparams =
      _PQnparamsPtr.asFunction<int Function(ffi.Pointer<PGresult>)>();

  int PQparamtype(
    ffi.Pointer<PGresult> res,
    int param_num,
  ) {
    return _PQparamtype(
      res,
      param_num,
    );
  }

  late final _PQparamtypePtr =
      _lookup<ffi.NativeFunction<Oid Function(ffi.Pointer<PGresult>, ffi.Int)>>(
          'PQparamtype');
  late final _PQparamtype =
      _PQparamtypePtr.asFunction<int Function(ffi.Pointer<PGresult>, int)>();

  ffi.Pointer<PGresult> PQdescribePrepared(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmt,
  ) {
    return _PQdescribePrepared(
      conn,
      stmt,
    );
  }

  late final _PQdescribePreparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>)>>('PQdescribePrepared');
  late final _PQdescribePrepared = _PQdescribePreparedPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PGresult> PQdescribePortal(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> portal,
  ) {
    return _PQdescribePortal(
      conn,
      portal,
    );
  }

  late final _PQdescribePortalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQdescribePortal');
  late final _PQdescribePortal = _PQdescribePortalPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQsendDescribePrepared(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmt,
  ) {
    return _PQsendDescribePrepared(
      conn,
      stmt,
    );
  }

  late final _PQsendDescribePreparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>)>>('PQsendDescribePrepared');
  late final _PQsendDescribePrepared = _PQsendDescribePreparedPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQsendDescribePortal(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> portal,
  ) {
    return _PQsendDescribePortal(
      conn,
      portal,
    );
  }

  late final _PQsendDescribePortalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>)>>('PQsendDescribePortal');
  late final _PQsendDescribePortal = _PQsendDescribePortalPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PGresult> PQclosePrepared(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmt,
  ) {
    return _PQclosePrepared(
      conn,
      stmt,
    );
  }

  late final _PQclosePreparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQclosePrepared');
  late final _PQclosePrepared = _PQclosePreparedPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PGresult> PQclosePortal(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> portal,
  ) {
    return _PQclosePortal(
      conn,
      portal,
    );
  }

  late final _PQclosePortalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('PQclosePortal');
  late final _PQclosePortal = _PQclosePortalPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQsendClosePrepared(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> stmt,
  ) {
    return _PQsendClosePrepared(
      conn,
      stmt,
    );
  }

  late final _PQsendClosePreparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>)>>('PQsendClosePrepared');
  late final _PQsendClosePrepared = _PQsendClosePreparedPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int PQsendClosePortal(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> portal,
  ) {
    return _PQsendClosePortal(
      conn,
      portal,
    );
  }

  late final _PQsendClosePortalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>)>>('PQsendClosePortal');
  late final _PQsendClosePortal = _PQsendClosePortalPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  void PQclear(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQclear(
      res,
    );
  }

  late final _PQclearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PGresult>)>>(
          'PQclear');
  late final _PQclear =
      _PQclearPtr.asFunction<void Function(ffi.Pointer<PGresult>)>();

  void PQfreemem(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _PQfreemem(
      ptr,
    );
  }

  late final _PQfreememPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'PQfreemem');
  late final _PQfreemem =
      _PQfreememPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<PGresult> PQmakeEmptyPGresult(
    ffi.Pointer<PGconn> conn,
    int status,
  ) {
    return _PQmakeEmptyPGresult(
      conn,
      status,
    );
  }

  late final _PQmakeEmptyPGresultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>, ffi.Int32)>>('PQmakeEmptyPGresult');
  late final _PQmakeEmptyPGresult = _PQmakeEmptyPGresultPtr.asFunction<
      ffi.Pointer<PGresult> Function(ffi.Pointer<PGconn>, int)>();

  ffi.Pointer<PGresult> PQcopyResult(
    ffi.Pointer<PGresult> src,
    int flags,
  ) {
    return _PQcopyResult(
      src,
      flags,
    );
  }

  late final _PQcopyResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGresult>, ffi.Int)>>('PQcopyResult');
  late final _PQcopyResult = _PQcopyResultPtr.asFunction<
      ffi.Pointer<PGresult> Function(ffi.Pointer<PGresult>, int)>();

  int PQsetResultAttrs(
    ffi.Pointer<PGresult> res,
    int numAttributes,
    ffi.Pointer<PGresAttDesc> attDescs,
  ) {
    return _PQsetResultAttrs(
      res,
      numAttributes,
      attDescs,
    );
  }

  late final _PQsetResultAttrsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGresult>, ffi.Int,
              ffi.Pointer<PGresAttDesc>)>>('PQsetResultAttrs');
  late final _PQsetResultAttrs = _PQsetResultAttrsPtr.asFunction<
      int Function(ffi.Pointer<PGresult>, int, ffi.Pointer<PGresAttDesc>)>();

  ffi.Pointer<ffi.Void> PQresultAlloc(
    ffi.Pointer<PGresult> res,
    int nBytes,
  ) {
    return _PQresultAlloc(
      res,
      nBytes,
    );
  }

  late final _PQresultAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PGresult>, ffi.Size)>>('PQresultAlloc');
  late final _PQresultAlloc = _PQresultAllocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PGresult>, int)>();

  int PQresultMemorySize(
    ffi.Pointer<PGresult> res,
  ) {
    return _PQresultMemorySize(
      res,
    );
  }

  late final _PQresultMemorySizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<PGresult>)>>(
          'PQresultMemorySize');
  late final _PQresultMemorySize =
      _PQresultMemorySizePtr.asFunction<int Function(ffi.Pointer<PGresult>)>();

  int PQsetvalue(
    ffi.Pointer<PGresult> res,
    int tup_num,
    int field_num,
    ffi.Pointer<ffi.Char> value,
    int len,
  ) {
    return _PQsetvalue(
      res,
      tup_num,
      field_num,
      value,
      len,
    );
  }

  late final _PQsetvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGresult>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('PQsetvalue');
  late final _PQsetvalue = _PQsetvaluePtr.asFunction<
      int Function(
          ffi.Pointer<PGresult>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int PQescapeStringConn(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> from,
    int length,
    ffi.Pointer<ffi.Int> error,
  ) {
    return _PQescapeStringConn(
      conn,
      to,
      from,
      length,
      error,
    );
  }

  late final _PQescapeStringConnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Int>)>>('PQescapeStringConn');
  late final _PQescapeStringConn = _PQescapeStringConnPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> PQescapeLiteral(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _PQescapeLiteral(
      conn,
      str,
      len,
    );
  }

  late final _PQescapeLiteralPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('PQescapeLiteral');
  late final _PQescapeLiteral = _PQescapeLiteralPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> PQescapeIdentifier(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _PQescapeIdentifier(
      conn,
      str,
      len,
    );
  }

  late final _PQescapeIdentifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('PQescapeIdentifier');
  late final _PQescapeIdentifier = _PQescapeIdentifierPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.UnsignedChar> PQescapeByteaConn(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.UnsignedChar> from,
    int from_length,
    ffi.Pointer<ffi.Size> to_length,
  ) {
    return _PQescapeByteaConn(
      conn,
      from,
      from_length,
      to_length,
    );
  }

  late final _PQescapeByteaConnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('PQescapeByteaConn');
  late final _PQescapeByteaConn = _PQescapeByteaConnPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<PGconn>,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> PQunescapeBytea(
    ffi.Pointer<ffi.UnsignedChar> strtext,
    ffi.Pointer<ffi.Size> retbuflen,
  ) {
    return _PQunescapeBytea(
      strtext,
      retbuflen,
    );
  }

  late final _PQunescapeByteaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('PQunescapeBytea');
  late final _PQunescapeBytea = _PQunescapeByteaPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Size>)>();

  int PQescapeString(
    ffi.Pointer<ffi.Char> to,
    ffi.Pointer<ffi.Char> from,
    int length,
  ) {
    return _PQescapeString(
      to,
      from,
      length,
    );
  }

  late final _PQescapeStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('PQescapeString');
  late final _PQescapeString = _PQescapeStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.UnsignedChar> PQescapeBytea(
    ffi.Pointer<ffi.UnsignedChar> from,
    int from_length,
    ffi.Pointer<ffi.Size> to_length,
  ) {
    return _PQescapeBytea(
      from,
      from_length,
      to_length,
    );
  }

  late final _PQescapeByteaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Pointer<ffi.Size>)>>('PQescapeBytea');
  late final _PQescapeBytea = _PQescapeByteaPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Size>)>();

  void PQprint(
    ffi.Pointer<FILE> fout,
    ffi.Pointer<PGresult> res,
    ffi.Pointer<PQprintOpt> po,
  ) {
    return _PQprint(
      fout,
      res,
      po,
    );
  }

  late final _PQprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<PGresult>,
              ffi.Pointer<PQprintOpt>)>>('PQprint');
  late final _PQprint = _PQprintPtr.asFunction<
      void Function(
          ffi.Pointer<FILE>, ffi.Pointer<PGresult>, ffi.Pointer<PQprintOpt>)>();

  void PQdisplayTuples(
    ffi.Pointer<PGresult> res,
    ffi.Pointer<FILE> fp,
    int fillAlign,
    ffi.Pointer<ffi.Char> fieldSep,
    int printHeader,
    int quiet,
  ) {
    return _PQdisplayTuples(
      res,
      fp,
      fillAlign,
      fieldSep,
      printHeader,
      quiet,
    );
  }

  late final _PQdisplayTuplesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PGresult>, ffi.Pointer<FILE>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('PQdisplayTuples');
  late final _PQdisplayTuples = _PQdisplayTuplesPtr.asFunction<
      void Function(ffi.Pointer<PGresult>, ffi.Pointer<FILE>, int,
          ffi.Pointer<ffi.Char>, int, int)>();

  void PQprintTuples(
    ffi.Pointer<PGresult> res,
    ffi.Pointer<FILE> fout,
    int PrintAttNames,
    int TerseOutput,
    int colWidth,
  ) {
    return _PQprintTuples(
      res,
      fout,
      PrintAttNames,
      TerseOutput,
      colWidth,
    );
  }

  late final _PQprintTuplesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PGresult>, ffi.Pointer<FILE>, ffi.Int,
              ffi.Int, ffi.Int)>>('PQprintTuples');
  late final _PQprintTuples = _PQprintTuplesPtr.asFunction<
      void Function(ffi.Pointer<PGresult>, ffi.Pointer<FILE>, int, int, int)>();

  int lo_open(
    ffi.Pointer<PGconn> conn,
    int lobjId,
    int mode,
  ) {
    return _lo_open(
      conn,
      lobjId,
      mode,
    );
  }

  late final _lo_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>, Oid, ffi.Int)>>('lo_open');
  late final _lo_open =
      _lo_openPtr.asFunction<int Function(ffi.Pointer<PGconn>, int, int)>();

  int lo_close(
    ffi.Pointer<PGconn> conn,
    int fd,
  ) {
    return _lo_close(
      conn,
      fd,
    );
  }

  late final _lo_closePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>, ffi.Int)>>(
      'lo_close');
  late final _lo_close =
      _lo_closePtr.asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  int lo_read(
    ffi.Pointer<PGconn> conn,
    int fd,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _lo_read(
      conn,
      fd,
      buf,
      len,
    );
  }

  late final _lo_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('lo_read');
  late final _lo_read = _lo_readPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, int, ffi.Pointer<ffi.Char>, int)>();

  int lo_write(
    ffi.Pointer<PGconn> conn,
    int fd,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _lo_write(
      conn,
      fd,
      buf,
      len,
    );
  }

  late final _lo_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PGconn>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('lo_write');
  late final _lo_write = _lo_writePtr.asFunction<
      int Function(ffi.Pointer<PGconn>, int, ffi.Pointer<ffi.Char>, int)>();

  int lo_lseek(
    ffi.Pointer<PGconn> conn,
    int fd,
    int offset,
    int whence,
  ) {
    return _lo_lseek(
      conn,
      fd,
      offset,
      whence,
    );
  }

  late final _lo_lseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>, ffi.Int, ffi.Int, ffi.Int)>>('lo_lseek');
  late final _lo_lseek = _lo_lseekPtr
      .asFunction<int Function(ffi.Pointer<PGconn>, int, int, int)>();

  int lo_lseek64(
    ffi.Pointer<PGconn> conn,
    int fd,
    int offset,
    int whence,
  ) {
    return _lo_lseek64(
      conn,
      fd,
      offset,
      whence,
    );
  }

  late final _lo_lseek64Ptr = _lookup<
      ffi.NativeFunction<
          pg_int64 Function(
              ffi.Pointer<PGconn>, ffi.Int, pg_int64, ffi.Int)>>('lo_lseek64');
  late final _lo_lseek64 = _lo_lseek64Ptr
      .asFunction<int Function(ffi.Pointer<PGconn>, int, int, int)>();

  int lo_creat(
    ffi.Pointer<PGconn> conn,
    int mode,
  ) {
    return _lo_creat(
      conn,
      mode,
    );
  }

  late final _lo_creatPtr =
      _lookup<ffi.NativeFunction<Oid Function(ffi.Pointer<PGconn>, ffi.Int)>>(
          'lo_creat');
  late final _lo_creat =
      _lo_creatPtr.asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  int lo_create(
    ffi.Pointer<PGconn> conn,
    int lobjId,
  ) {
    return _lo_create(
      conn,
      lobjId,
    );
  }

  late final _lo_createPtr =
      _lookup<ffi.NativeFunction<Oid Function(ffi.Pointer<PGconn>, Oid)>>(
          'lo_create');
  late final _lo_create =
      _lo_createPtr.asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  int lo_tell(
    ffi.Pointer<PGconn> conn,
    int fd,
  ) {
    return _lo_tell(
      conn,
      fd,
    );
  }

  late final _lo_tellPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>, ffi.Int)>>(
      'lo_tell');
  late final _lo_tell =
      _lo_tellPtr.asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  int lo_tell64(
    ffi.Pointer<PGconn> conn,
    int fd,
  ) {
    return _lo_tell64(
      conn,
      fd,
    );
  }

  late final _lo_tell64Ptr = _lookup<
          ffi.NativeFunction<pg_int64 Function(ffi.Pointer<PGconn>, ffi.Int)>>(
      'lo_tell64');
  late final _lo_tell64 =
      _lo_tell64Ptr.asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  int lo_truncate(
    ffi.Pointer<PGconn> conn,
    int fd,
    int len,
  ) {
    return _lo_truncate(
      conn,
      fd,
      len,
    );
  }

  late final _lo_truncatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>, ffi.Int, ffi.Size)>>('lo_truncate');
  late final _lo_truncate =
      _lo_truncatePtr.asFunction<int Function(ffi.Pointer<PGconn>, int, int)>();

  int lo_truncate64(
    ffi.Pointer<PGconn> conn,
    int fd,
    int len,
  ) {
    return _lo_truncate64(
      conn,
      fd,
      len,
    );
  }

  late final _lo_truncate64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>, ffi.Int, pg_int64)>>('lo_truncate64');
  late final _lo_truncate64 = _lo_truncate64Ptr
      .asFunction<int Function(ffi.Pointer<PGconn>, int, int)>();

  int lo_unlink(
    ffi.Pointer<PGconn> conn,
    int lobjId,
  ) {
    return _lo_unlink(
      conn,
      lobjId,
    );
  }

  late final _lo_unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PGconn>, Oid)>>(
          'lo_unlink');
  late final _lo_unlink =
      _lo_unlinkPtr.asFunction<int Function(ffi.Pointer<PGconn>, int)>();

  int lo_import(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _lo_import(
      conn,
      filename,
    );
  }

  late final _lo_importPtr = _lookup<
      ffi.NativeFunction<
          Oid Function(
              ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>>('lo_import');
  late final _lo_import = _lo_importPtr
      .asFunction<int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>)>();

  int lo_import_with_oid(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> filename,
    int lobjId,
  ) {
    return _lo_import_with_oid(
      conn,
      filename,
      lobjId,
    );
  }

  late final _lo_import_with_oidPtr = _lookup<
      ffi.NativeFunction<
          Oid Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
              Oid)>>('lo_import_with_oid');
  late final _lo_import_with_oid = _lo_import_with_oidPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, int)>();

  int lo_export(
    ffi.Pointer<PGconn> conn,
    int lobjId,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _lo_export(
      conn,
      lobjId,
      filename,
    );
  }

  late final _lo_exportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PGconn>, Oid, ffi.Pointer<ffi.Char>)>>('lo_export');
  late final _lo_export = _lo_exportPtr.asFunction<
      int Function(ffi.Pointer<PGconn>, int, ffi.Pointer<ffi.Char>)>();

  int PQlibVersion() {
    return _PQlibVersion();
  }

  late final _PQlibVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('PQlibVersion');
  late final _PQlibVersion = _PQlibVersionPtr.asFunction<int Function()>();

  int PQmblen(
    ffi.Pointer<ffi.Char> s,
    int encoding,
  ) {
    return _PQmblen(
      s,
      encoding,
    );
  }

  late final _PQmblenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'PQmblen');
  late final _PQmblen =
      _PQmblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int PQmblenBounded(
    ffi.Pointer<ffi.Char> s,
    int encoding,
  ) {
    return _PQmblenBounded(
      s,
      encoding,
    );
  }

  late final _PQmblenBoundedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'PQmblenBounded');
  late final _PQmblenBounded =
      _PQmblenBoundedPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int PQdsplen(
    ffi.Pointer<ffi.Char> s,
    int encoding,
  ) {
    return _PQdsplen(
      s,
      encoding,
    );
  }

  late final _PQdsplenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'PQdsplen');
  late final _PQdsplen =
      _PQdsplenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int PQenv2encoding() {
    return _PQenv2encoding();
  }

  late final _PQenv2encodingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('PQenv2encoding');
  late final _PQenv2encoding = _PQenv2encodingPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> PQencryptPassword(
    ffi.Pointer<ffi.Char> passwd,
    ffi.Pointer<ffi.Char> user,
  ) {
    return _PQencryptPassword(
      passwd,
      user,
    );
  }

  late final _PQencryptPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PQencryptPassword');
  late final _PQencryptPassword = _PQencryptPasswordPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> PQencryptPasswordConn(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> passwd,
    ffi.Pointer<ffi.Char> user,
    ffi.Pointer<ffi.Char> algorithm,
  ) {
    return _PQencryptPasswordConn(
      conn,
      passwd,
      user,
      algorithm,
    );
  }

  late final _PQencryptPasswordConnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PQencryptPasswordConn');
  late final _PQencryptPasswordConn = _PQencryptPasswordConnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PGresult> PQchangePassword(
    ffi.Pointer<PGconn> conn,
    ffi.Pointer<ffi.Char> user,
    ffi.Pointer<ffi.Char> passwd,
  ) {
    return _PQchangePassword(
      conn,
      user,
      passwd,
    );
  }

  late final _PQchangePasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PGresult> Function(
              ffi.Pointer<PGconn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PQchangePassword');
  late final _PQchangePassword = _PQchangePasswordPtr.asFunction<
      ffi.Pointer<PGresult> Function(
          ffi.Pointer<PGconn>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pg_char_to_encoding(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _pg_char_to_encoding(
      name,
    );
  }

  late final _pg_char_to_encodingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pg_char_to_encoding');
  late final _pg_char_to_encoding =
      _pg_char_to_encodingPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pg_encoding_to_char(
    int encoding,
  ) {
    return _pg_encoding_to_char(
      encoding,
    );
  }

  late final _pg_encoding_to_charPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pg_encoding_to_char');
  late final _pg_encoding_to_char =
      _pg_encoding_to_charPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int pg_valid_server_encoding_id(
    int encoding,
  ) {
    return _pg_valid_server_encoding_id(
      encoding,
    );
  }

  late final _pg_valid_server_encoding_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'pg_valid_server_encoding_id');
  late final _pg_valid_server_encoding_id =
      _pg_valid_server_encoding_idPtr.asFunction<int Function(int)>();

  PQsslKeyPassHook_OpenSSL_type PQgetSSLKeyPassHook_OpenSSL() {
    return _PQgetSSLKeyPassHook_OpenSSL();
  }

  late final _PQgetSSLKeyPassHook_OpenSSLPtr =
      _lookup<ffi.NativeFunction<PQsslKeyPassHook_OpenSSL_type Function()>>(
          'PQgetSSLKeyPassHook_OpenSSL');
  late final _PQgetSSLKeyPassHook_OpenSSL = _PQgetSSLKeyPassHook_OpenSSLPtr
      .asFunction<PQsslKeyPassHook_OpenSSL_type Function()>();

  void PQsetSSLKeyPassHook_OpenSSL(
    PQsslKeyPassHook_OpenSSL_type hook,
  ) {
    return _PQsetSSLKeyPassHook_OpenSSL(
      hook,
    );
  }

  late final _PQsetSSLKeyPassHook_OpenSSLPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(PQsslKeyPassHook_OpenSSL_type)>>(
      'PQsetSSLKeyPassHook_OpenSSL');
  late final _PQsetSSLKeyPassHook_OpenSSL = _PQsetSSLKeyPassHook_OpenSSLPtr
      .asFunction<void Function(PQsslKeyPassHook_OpenSSL_type)>();

  int PQdefaultSSLKeyPassHook_OpenSSL(
    ffi.Pointer<ffi.Char> buf,
    int size,
    ffi.Pointer<PGconn> conn,
  ) {
    return _PQdefaultSSLKeyPassHook_OpenSSL(
      buf,
      size,
      conn,
    );
  }

  late final _PQdefaultSSLKeyPassHook_OpenSSLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<PGconn>)>>('PQdefaultSSLKeyPassHook_OpenSSL');
  late final _PQdefaultSSLKeyPassHook_OpenSSL =
      _PQdefaultSSLKeyPassHook_OpenSSLPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<PGconn>)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

final class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

typedef FILE = _iobuf;
typedef wint_t = ffi.UnsignedShort;
typedef Dartwint_t = int;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef rsize_t = ffi.Size;
typedef Dartrsize_t = int;
typedef fpos_t = ffi.LongLong;
typedef Dartfpos_t = int;

abstract class ConnStatusType {
  static const int CONNECTION_OK = 0;
  static const int CONNECTION_BAD = 1;
  static const int CONNECTION_STARTED = 2;
  static const int CONNECTION_MADE = 3;
  static const int CONNECTION_AWAITING_RESPONSE = 4;
  static const int CONNECTION_AUTH_OK = 5;
  static const int CONNECTION_SETENV = 6;
  static const int CONNECTION_SSL_STARTUP = 7;
  static const int CONNECTION_NEEDED = 8;
  static const int CONNECTION_CHECK_WRITABLE = 9;
  static const int CONNECTION_CONSUME = 10;
  static const int CONNECTION_GSS_STARTUP = 11;
  static const int CONNECTION_CHECK_TARGET = 12;
  static const int CONNECTION_CHECK_STANDBY = 13;
}

abstract class PostgresPollingStatusType {
  static const int PGRES_POLLING_FAILED = 0;
  static const int PGRES_POLLING_READING = 1;
  static const int PGRES_POLLING_WRITING = 2;
  static const int PGRES_POLLING_OK = 3;
  static const int PGRES_POLLING_ACTIVE = 4;
}

abstract class ExecStatusType {
  static const int PGRES_EMPTY_QUERY = 0;
  static const int PGRES_COMMAND_OK = 1;
  static const int PGRES_TUPLES_OK = 2;
  static const int PGRES_COPY_OUT = 3;
  static const int PGRES_COPY_IN = 4;
  static const int PGRES_BAD_RESPONSE = 5;
  static const int PGRES_NONFATAL_ERROR = 6;
  static const int PGRES_FATAL_ERROR = 7;
  static const int PGRES_COPY_BOTH = 8;
  static const int PGRES_SINGLE_TUPLE = 9;
  static const int PGRES_PIPELINE_SYNC = 10;
  static const int PGRES_PIPELINE_ABORTED = 11;
}

abstract class PGTransactionStatusType {
  static const int PQTRANS_IDLE = 0;
  static const int PQTRANS_ACTIVE = 1;
  static const int PQTRANS_INTRANS = 2;
  static const int PQTRANS_INERROR = 3;
  static const int PQTRANS_UNKNOWN = 4;
}

abstract class PGVerbosity {
  static const int PQERRORS_TERSE = 0;
  static const int PQERRORS_DEFAULT = 1;
  static const int PQERRORS_VERBOSE = 2;
  static const int PQERRORS_SQLSTATE = 3;
}

abstract class PGContextVisibility {
  static const int PQSHOW_CONTEXT_NEVER = 0;
  static const int PQSHOW_CONTEXT_ERRORS = 1;
  static const int PQSHOW_CONTEXT_ALWAYS = 2;
}

abstract class PGPing {
  static const int PQPING_OK = 0;
  static const int PQPING_REJECT = 1;
  static const int PQPING_NO_RESPONSE = 2;
  static const int PQPING_NO_ATTEMPT = 3;
}

abstract class PGpipelineStatus {
  static const int PQ_PIPELINE_OFF = 0;
  static const int PQ_PIPELINE_ON = 1;
  static const int PQ_PIPELINE_ABORTED = 2;
}

final class pg_conn extends ffi.Opaque {}

final class pg_result extends ffi.Opaque {}

final class pg_cancel extends ffi.Opaque {}

final class pgNotify extends ffi.Struct {
  external ffi.Pointer<ffi.Char> relname;

  @ffi.Int()
  external int be_pid;

  external ffi.Pointer<ffi.Char> extra;

  external ffi.Pointer<pgNotify> next;
}

final class _PQprintOpt extends ffi.Struct {
  @pqbool()
  external int header;

  @pqbool()
  external int align;

  @pqbool()
  external int standard;

  @pqbool()
  external int html3;

  @pqbool()
  external int expanded;

  @pqbool()
  external int pager;

  external ffi.Pointer<ffi.Char> fieldSep;

  external ffi.Pointer<ffi.Char> tableOpt;

  external ffi.Pointer<ffi.Char> caption;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> fieldName;
}

typedef pqbool = ffi.Char;
typedef Dartpqbool = int;

final class _PQconninfoOption extends ffi.Struct {
  external ffi.Pointer<ffi.Char> keyword;

  external ffi.Pointer<ffi.Char> envvar;

  external ffi.Pointer<ffi.Char> compiled;

  external ffi.Pointer<ffi.Char> val;

  external ffi.Pointer<ffi.Char> label;

  external ffi.Pointer<ffi.Char> dispchar;

  @ffi.Int()
  external int dispsize;
}

final class PQArgBlock extends ffi.Struct {
  @ffi.Int()
  external int len;

  @ffi.Int()
  external int isint;

  external UnnamedUnion1 u;
}

final class UnnamedUnion1 extends ffi.Union {
  external ffi.Pointer<ffi.Int> ptr;

  @ffi.Int()
  external int integer;
}

final class pgresAttDesc extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @Oid()
  external int tableid;

  @ffi.Int()
  external int columnid;

  @ffi.Int()
  external int format;

  @Oid()
  external int typid;

  @ffi.Int()
  external int typlen;

  @ffi.Int()
  external int atttypmod;
}

typedef Oid = ffi.UnsignedInt;
typedef DartOid = int;
typedef PGconn = pg_conn;
typedef PQconninfoOption = _PQconninfoOption;
typedef PGcancel = pg_cancel;
typedef PQnoticeReceiver
    = ffi.Pointer<ffi.NativeFunction<PQnoticeReceiverFunction>>;
typedef PQnoticeReceiverFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> arg, ffi.Pointer<PGresult> res);
typedef DartPQnoticeReceiverFunction = void Function(
    ffi.Pointer<ffi.Void> arg, ffi.Pointer<PGresult> res);
typedef PGresult = pg_result;
typedef PQnoticeProcessor
    = ffi.Pointer<ffi.NativeFunction<PQnoticeProcessorFunction>>;
typedef PQnoticeProcessorFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> arg, ffi.Pointer<ffi.Char> message);
typedef DartPQnoticeProcessorFunction = void Function(
    ffi.Pointer<ffi.Void> arg, ffi.Pointer<ffi.Char> message);
typedef pgthreadlock_t
    = ffi.Pointer<ffi.NativeFunction<pgthreadlock_tFunction>>;
typedef pgthreadlock_tFunction = ffi.Void Function(ffi.Int acquire);
typedef Dartpgthreadlock_tFunction = void Function(int acquire);
typedef PGnotify = pgNotify;
typedef PGresAttDesc = pgresAttDesc;
typedef PQprintOpt = _PQprintOpt;
typedef pg_int64 = ffi.LongLong;
typedef Dartpg_int64 = int;
typedef PQsslKeyPassHook_OpenSSL_type
    = ffi.Pointer<ffi.NativeFunction<PQsslKeyPassHook_OpenSSL_typeFunction>>;
typedef PQsslKeyPassHook_OpenSSL_typeFunction = ffi.Int Function(
    ffi.Pointer<ffi.Char> buf, ffi.Int size, ffi.Pointer<PGconn> conn);
typedef DartPQsslKeyPassHook_OpenSSL_typeFunction = int Function(
    ffi.Pointer<ffi.Char> buf, int size, ffi.Pointer<PGconn> conn);

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;

const int InvalidOid = 0;

const int PG_DIAG_SEVERITY = 83;

const int PG_DIAG_SEVERITY_NONLOCALIZED = 86;

const int PG_DIAG_SQLSTATE = 67;

const int PG_DIAG_MESSAGE_PRIMARY = 77;

const int PG_DIAG_MESSAGE_DETAIL = 68;

const int PG_DIAG_MESSAGE_HINT = 72;

const int PG_DIAG_STATEMENT_POSITION = 80;

const int PG_DIAG_INTERNAL_POSITION = 112;

const int PG_DIAG_INTERNAL_QUERY = 113;

const int PG_DIAG_CONTEXT = 87;

const int PG_DIAG_SCHEMA_NAME = 115;

const int PG_DIAG_TABLE_NAME = 116;

const int PG_DIAG_COLUMN_NAME = 99;

const int PG_DIAG_DATATYPE_NAME = 100;

const int PG_DIAG_CONSTRAINT_NAME = 110;

const int PG_DIAG_SOURCE_FILE = 70;

const int PG_DIAG_SOURCE_LINE = 76;

const int PG_DIAG_SOURCE_FUNCTION = 82;

const int LIBPQ_HAS_PIPELINING = 1;

const int LIBPQ_HAS_TRACE_FLAGS = 1;

const int LIBPQ_HAS_SSL_LIBRARY_DETECTION = 1;

const int PG_COPYRES_ATTRS = 1;

const int PG_COPYRES_TUPLES = 2;

const int PG_COPYRES_EVENTS = 4;

const int PG_COPYRES_NOTICEHOOKS = 8;

const int PQTRACE_SUPPRESS_TIMESTAMPS = 1;

const int PQTRACE_REGRESS_MODE = 2;

const int PQ_QUERY_PARAM_MAX_LIMIT = 65535;

const String PQnoPasswordSupplied = 'fe_sendauth: no password supplied\n';
